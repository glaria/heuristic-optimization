# -*- coding: utf-8 -*-
"""RS_BFP: ex1 and 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gmEV8K46C7Ghtq74BxJI3mY4Z6qMWBlf
"""

#def function that choose a random value from the searchSpace
#searchSpace is defined as a list of lists [[],[],[]...] where each inner list has length 2
#list nth represents lower and upper limit of the nth component of the basin function input
#by doing this we dont need to provide the size of problem
import random

def randomValue(solSpace):

  sol_v = []
  for element in solSpace:
    max_val = element[1]
    min_val = element[0]

    rand_value = (max_val - min_val)*random.random() + min_val
    sol_v.append(rand_value)
  return sol_v

def basinFunction(vector): #ex 2
  value = 0
  for i in range(len(vector)):
    value = value + vector[i]**2
  return value

iteration = 1000000 #max number of iterations of the algorithm
n = 2 #number of dimensions of the function input
input_space = [[-5,5]]*2

i = 0
while iteration >= i:
  if i == 0: #there is no value evaluated yet
    best_sol = randomValue(input_space)
    minimum_cost = basinFunction(randomValue(input_space)) 
  else:
    candidate = randomValue(input_space)
    if minimum_cost > basinFunction(candidate):
      best_sol = candidate
      minimum_cost = basinFunction(candidate)
  i+=1

print("Best solution", best_sol)
print("Minimum cost", minimum_cost)

