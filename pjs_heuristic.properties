# -*- coding: utf-8 -*-
"""
Created on Sun Dec 12 20:36:01 2021

@author: Luis Alberto Glaria
"""

""" PANADERO & JUAN SAVINGS HEURISTIC FOR THE TEAM ORIENTEERING PROBLEM (TOP) """

import networkx as nx
from routing_objects import Node, Edge, Route, Solution
import math
import operator

#alpha used to compute edge efficiency
alpha = 0.7

instanceName = 'p5.3.q' # name of the instance
# txt file with the TOP instance data
fileName = 'data/' + instanceName + '.txt'

with open(fileName) as instance:
    i = -3 # we start at -3 so that the first node is node 0
    nodes = []
    for line in instance:
        if i == -3: pass # line 0 contains the number of nodes, not ne
        elif i == -2: fleetSize = int( line.split(';')[1] )
        elif i == -1: routeMaxCost = float( line.split(';')[1] )
        else:
            # array data with node data: x, y, demand (reward in TOP)
            data = [float(x) for x in line.split(';')]
            aNode = Node(i, data[0], data[1], data[2])
            nodes.append(aNode)
        i += 1
        
        
startTime = time.time()
"""Construct edges with costs and efficiency list from nodes """

Start = nodes[0] # first node is the start depot
finish - nodes [-1] # last node is the finish depot

for node in nodes[1:-1]: # excludes both depots
    snEdge - Edge(start, node) # creates the (start, node) edge (arc)
    nfEdge - Edge(node, finish)
    # compute the Euclidean distance as cost
    snEdge.cost = math.sqrt((node.x - start.x)**2 + (node.y - start.y)**2)
    nfEdge.cost = math.sqrt((node.x - finish.x)**2 + (node.y - finish.y) **2)
    # save in node a reference to the (depot, node) edge (arc)
    node.dnEdge = snEdge
    node.ndEdge = nfEdge

efficiencyList = []
for i in range(i, len(nodes) - 2): # excludes the start and finish depots
    iNode = nodes[i]
    
    for j in range(i + 1, len(nodes) - 1):
        jNode - nodes[j]
        ijEdge = Edge(iNode, jNode) # creates the (i, j) edge
        jiEdge - Edge(jNode, iNode)
        ijedge.invEdge - jiEdge # sets the inverse edge (arc)
        jiEdge.invEdge = ijEdge
        
        # compute the Euclidean distance as cost
        ijEdge.cost - math.sqrt((jNode.x - iNode.x)**2 + (jNode.y - iNode.y)**2)
        jiEdge.cost = ijEdge.cost # assume symmetric costs
        
        # compute efficiency as proposed by Panadero et al. (2020)
        ijSavings - iNode.ndEdge.cost + jNode.dnEdge.cost - ijEdge.cost
        edgeReward = iNode.demand + jNode.demand
        ijEdge.savings = ijSavings
        ijEdge.efficiency = alpha * ijSavings + (1 - alpha) * edgeReward
        jiSavings = jNode.ndEdge.cost + iNode.dnEdge.cost - jiEdge.cost
        jiEdge. savings = jisavings
        jiEdge.efficiency = alpha * jiSavings + (1 - alpha) * edgeReward
        # save both edges in the efficiency list
        efficiencyList.append(ijEdge)
        efficiencyList.append(jiEdge)
        
# sort the list of edges from higher to lower efficiency
efficiencyList.sort(key = operator.attrgetter("efficiency"), reverse True)

